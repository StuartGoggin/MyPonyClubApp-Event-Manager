'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Plus, Edit, Trash2, Users, MapPin } from 'lucide-react';
import { Zone, Club } from '@/lib/types';
import { zonesMockClient, clubsMockClient } from '@/lib/admin-data';

export default function AdminClubsPage() {
  const [zones, setZones] = useState<Zone[]>([]);
  const [clubs, setClubs] = useState<Club[]>([]);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [editingClub, setEditingClub] = useState<Club | null>(null);
  const [formData, setFormData] = useState({ 
    name: '', 
    zoneId: '', 
    latitude: '', 
    longitude: '' 
  });

  useEffect(() => {
    // Initialize with mock data for now
    setZones(zonesMockClient);
    setClubs(clubsMockClient);
  }, []);

  const getZoneName = (zoneId: string) => {
    return zones.find(zone => zone.id === zoneId)?.name || 'Unknown Zone';
  };

  const getClubsByZone = (zoneId: string) => {
    return clubs.filter(club => club.zoneId === zoneId);
  };

  const handleCreate = () => {
    setEditingClub(null);
    setFormData({ name: '', zoneId: '', latitude: '', longitude: '' });
    setIsDialogOpen(true);
  };

  const handleEdit = (club: Club) => {
    setEditingClub(club);
    setFormData({ 
      name: club.name,
      zoneId: club.zoneId,
      latitude: club.latitude?.toString() || '',
      longitude: club.longitude?.toString() || ''
    });
    setIsDialogOpen(true);
  };

  const handleSave = async () => {
    if (!formData.name.trim() || !formData.zoneId) return;

    const clubData: Omit<Club, 'id'> = {
      name: formData.name.trim(),
      zoneId: formData.zoneId,
      latitude: formData.latitude ? parseFloat(formData.latitude) : undefined,
      longitude: formData.longitude ? parseFloat(formData.longitude) : undefined,
    };

    if (editingClub) {
      // Update existing club
      setClubs(prev => prev.map(club => 
        club.id === editingClub.id 
          ? { ...club, ...clubData }
          : club
      ));
    } else {
      // Create new club
      const newClub: Club = {
        id: `club-${Date.now()}`, // In real app, this would be generated by backend
        ...clubData
      };
      setClubs(prev => [...prev, newClub]);
    }

    setIsDialogOpen(false);
    setEditingClub(null);
    setFormData({ name: '', zoneId: '', latitude: '', longitude: '' });
  };

  const handleDelete = async (club: Club) => {
    // In a real app, you'd check if the club has any events first
    if (confirm(`Are you sure you want to delete "${club.name}"?`)) {
      setClubs(prev => prev.filter(c => c.id !== club.id));
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold tracking-tight">Club Management</h1>
          <p className="text-muted-foreground">
            Manage pony clubs and their zone assignments
          </p>
        </div>
        <Button onClick={handleCreate} disabled={zones.length === 0}>
          <Plus className="h-4 w-4 mr-2" />
          Add Club
        </Button>
      </div>

      {zones.length === 0 && (
        <Card className="border-amber-200 bg-amber-50">
          <CardContent className="p-6">
            <div className="flex items-center gap-3">
              <MapPin className="h-5 w-5 text-amber-600" />
              <div>
                <p className="font-medium text-amber-800">No Zones Configured</p>
                <p className="text-sm text-amber-700">
                  You need to create zones before you can add clubs. 
                  <Button variant="link" className="h-auto p-0 text-amber-700 underline">
                    Go to Zone Management
                  </Button>
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Summary Stats */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Total Clubs</p>
                <p className="text-2xl font-bold">{clubs.length}</p>
              </div>
              <Users className="h-8 w-8 text-blue-500" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">With Coordinates</p>
                <p className="text-2xl font-bold">
                  {clubs.filter(c => c.latitude && c.longitude).length}
                </p>
              </div>
              <MapPin className="h-8 w-8 text-green-500" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Active Zones</p>
                <p className="text-2xl font-bold">
                  {zones.filter(z => getClubsByZone(z.id).length > 0).length}
                </p>
              </div>
              <MapPin className="h-8 w-8 text-purple-500" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Clubs by Zone */}
      {zones.map(zone => {
        const zoneClubs = getClubsByZone(zone.id);
        return (
          <Card key={zone.id}>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <MapPin className="h-5 w-5" />
                {zone.name}
                <Badge variant="secondary">{zoneClubs.length} clubs</Badge>
              </CardTitle>
            </CardHeader>
            <CardContent>
              {zoneClubs.length > 0 ? (
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Club Name</TableHead>
                      <TableHead>Coordinates</TableHead>
                      <TableHead>Status</TableHead>
                      <TableHead className="text-right">Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {zoneClubs.map(club => (
                      <TableRow key={club.id}>
                        <TableCell className="font-medium">{club.name}</TableCell>
                        <TableCell>
                          {club.latitude && club.longitude ? (
                            <Badge variant="outline" className="text-xs">
                              {club.latitude.toFixed(4)}, {club.longitude.toFixed(4)}
                            </Badge>
                          ) : (
                            <span className="text-muted-foreground text-sm">Not set</span>
                          )}
                        </TableCell>
                        <TableCell>
                          <Badge variant={club.latitude && club.longitude ? 'default' : 'secondary'}>
                            {club.latitude && club.longitude ? 'Complete' : 'Basic'}
                          </Badge>
                        </TableCell>
                        <TableCell className="text-right">
                          <div className="flex justify-end gap-2">
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleEdit(club)}
                            >
                              <Edit className="h-4 w-4" />
                            </Button>
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleDelete(club)}
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              ) : (
                <div className="text-center py-8 text-muted-foreground">
                  No clubs in this zone yet.
                </div>
              )}
            </CardContent>
          </Card>
        );
      })}

      {/* Add/Edit Dialog */}
      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>
              {editingClub ? 'Edit Club' : 'Add New Club'}
            </DialogTitle>
            <DialogDescription>
              {editingClub 
                ? 'Update the club details below.'
                : 'Enter the details for the new club.'
              }
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <Label htmlFor="name">Club Name</Label>
              <Input
                id="name"
                placeholder="e.g., Melbourne Pony Club"
                value={formData.name}
                onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
              />
            </div>
            <div>
              <Label htmlFor="zone">Zone</Label>
              <Select value={formData.zoneId} onValueChange={(value) => setFormData(prev => ({ ...prev, zoneId: value }))}>
                <SelectTrigger>
                  <SelectValue placeholder="Select a zone" />
                </SelectTrigger>
                <SelectContent>
                  {zones.map(zone => (
                    <SelectItem key={zone.id} value={zone.id}>
                      {zone.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="latitude">Latitude (optional)</Label>
                <Input
                  id="latitude"
                  type="number"
                  step="any"
                  placeholder="-37.8136"
                  value={formData.latitude}
                  onChange={(e) => setFormData(prev => ({ ...prev, latitude: e.target.value }))}
                />
              </div>
              <div>
                <Label htmlFor="longitude">Longitude (optional)</Label>
                <Input
                  id="longitude"
                  type="number"
                  step="any"
                  placeholder="144.9631"
                  value={formData.longitude}
                  onChange={(e) => setFormData(prev => ({ ...prev, longitude: e.target.value }))}
                />
              </div>
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsDialogOpen(false)}>
              Cancel
            </Button>
            <Button onClick={handleSave} disabled={!formData.name.trim() || !formData.zoneId}>
              {editingClub ? 'Update Club' : 'Create Club'}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
