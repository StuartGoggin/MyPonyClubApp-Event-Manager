'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Plus, Edit, Trash2, FileText, Calendar } from 'lucide-react';
import { EventType, Event } from '@/lib/types';
import { eventTypesMock } from '@/lib/client-data';
import { DataImportExport } from '@/components/admin/data-import-export';

export default function AdminEventTypesPage() {
  const [eventTypes, setEventTypes] = useState<EventType[]>([]);
  const [events, setEvents] = useState<Event[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [editingEventType, setEditingEventType] = useState<EventType | null>(null);
  const [formData, setFormData] = useState({ name: '' });

  useEffect(() => {
    // Load event types and events from the API
    const loadData = async () => {
      setIsLoading(true);
      try {
        // Load event types
        const eventTypesResponse = await fetch('/api/event-types');
        if (eventTypesResponse.ok) {
          const eventTypesData = await eventTypesResponse.json();
          // Check if the response has an eventTypes property or is an array
          const eventTypesArray = Array.isArray(eventTypesData) 
            ? eventTypesData 
            : eventTypesData.eventTypes || [];
          setEventTypes(eventTypesArray);
        } else {
          // Fallback to mock data if API fails
          setEventTypes(eventTypesMock);
        }

        // Load events to get proper counts
        const eventsResponse = await fetch('/api/events');
        if (eventsResponse.ok) {
          const eventsData = await eventsResponse.json();
          // Check if the response has an events property or is an array
          const eventsArray = Array.isArray(eventsData) 
            ? eventsData 
            : eventsData.events || [];
          setEvents(eventsArray);
        } else {
          // If events API fails, keep empty array
          setEvents([]);
        }
      } catch (error) {
        console.error('Error loading data:', error);
        // Fallback to mock data
        setEventTypes(eventTypesMock);
        setEvents([]);
      } finally {
        setIsLoading(false);
      }
    };

    loadData();
  }, []);

  const getEventCountForType = (eventTypeId: string) => {
    return events.filter(event => event.eventTypeId === eventTypeId).length;
  };

  const handleCreate = () => {
    setEditingEventType(null);
    setFormData({ name: '' });
    setIsDialogOpen(true);
  };

  const handleEdit = (eventType: EventType) => {
    setEditingEventType(eventType);
    setFormData({ name: eventType.name });
    setIsDialogOpen(true);
  };

  const handleSave = async () => {
    if (!formData.name.trim()) return;

    if (editingEventType) {
      // Update existing event type
      setEventTypes(prev => prev.map(eventType => 
        eventType.id === editingEventType.id 
          ? { ...eventType, name: formData.name.trim() }
          : eventType
      ));
    } else {
      // Create new event type
      const newEventType: EventType = {
        id: `event-type-${Date.now()}`, // In real app, this would be generated by backend
        name: formData.name.trim()
      };
      setEventTypes(prev => [...prev, newEventType]);
    }

    setIsDialogOpen(false);
    setEditingEventType(null);
    setFormData({ name: '' });
  };

  const handleDelete = async (eventType: EventType) => {
    const eventCount = getEventCountForType(eventType.id);
    if (eventCount > 0) {
      alert(`Cannot delete event type "${eventType.name}" as it has ${eventCount} event(s) using it. Please reassign or remove the events first.`);
      return;
    }

    if (confirm(`Are you sure you want to delete the event type "${eventType.name}"?`)) {
      setEventTypes(prev => prev.filter(et => et.id !== eventType.id));
    }
  };

  // Common event type suggestions
  const commonEventTypes = [
    'Rally',
    'ODE (One Day Event)',
    'Dressage',
    'Show Jumping',
    'Cross Country',
    'Combined Training',
    'Tetrathalon',
    'Games',
    'Prince Philip Cup',
    'Championships',
    'Training Day',
    'Clinic',
    'Fund Raising Event'
  ];

  const handleAddCommon = (typeName: string) => {
    const newEventType: EventType = {
      id: `event-type-${Date.now()}`,
      name: typeName
    };
    setEventTypes(prev => [...prev, newEventType]);
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold tracking-tight">Event Type Management</h1>
          <p className="text-muted-foreground">
            Configure the types of events that can be requested
          </p>
        </div>
        <div className="flex flex-col sm:flex-row gap-2">
          <DataImportExport
            data={eventTypes}
            entityName="Event Types"
            filename="pony-club-event-types"
            columns={[
              { key: 'name', label: 'Event Type Name', required: true }
            ]}
            onImport={(newEventTypes) => setEventTypes(prev => [...prev, ...newEventTypes])}
            compareFunction={(existing, imported) => existing.name === imported.name}
          />
          <Button onClick={handleCreate} size="sm">
            <Plus className="h-4 w-4 mr-2" />
            Add Event Type
          </Button>
        </div>
      </div>

      {/* Summary Stats */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Total Event Types</p>
                <p className="text-2xl font-bold">{eventTypes.length}</p>
              </div>
              <FileText className="h-8 w-8 text-blue-500" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Total Events</p>
                <p className="text-2xl font-bold">{events.length}</p>
              </div>
              <Calendar className="h-8 w-8 text-green-500" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Most Popular</p>
                <p className="text-lg font-bold">
                  {eventTypes.length > 0 ? 
                    eventTypes.reduce((prev, current) => 
                      getEventCountForType(prev.id) > getEventCountForType(current.id) ? prev : current
                    ).name : 'None'
                  }
                </p>
              </div>
              <FileText className="h-8 w-8 text-purple-500" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Quick Add Common Types */}
      {eventTypes.length === 0 && (
        <Card>
          <CardHeader>
            <CardTitle>Quick Start - Common Event Types</CardTitle>
            <CardDescription>
              Click to add common pony club event types to get started
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex flex-wrap gap-2">
              {commonEventTypes.map(type => (
                <Button
                  key={type}
                  variant="outline"
                  size="sm"
                  onClick={() => handleAddCommon(type)}
                >
                  <Plus className="h-3 w-3 mr-1" />
                  {type}
                </Button>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Event Types Table */}
      <Card>
        <CardHeader>
          <CardTitle>All Event Types</CardTitle>
          <CardDescription>
            List of all configured event types and their usage
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Event Type Name</TableHead>
                <TableHead>Events Using Type</TableHead>
                <TableHead>Status</TableHead>
                <TableHead className="text-right">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {isLoading ? (
                <TableRow>
                  <TableCell colSpan={4} className="text-center py-6">
                    Loading event types...
                  </TableCell>
                </TableRow>
              ) : Array.isArray(eventTypes) && eventTypes.length > 0 ? (
                eventTypes.map(eventType => {
                  const eventCount = getEventCountForType(eventType.id);
                  return (
                    <TableRow key={eventType.id}>
                      <TableCell className="font-medium">{eventType.name}</TableCell>
                      <TableCell>
                        <Badge variant="secondary">
                          {eventCount} event{eventCount !== 1 ? 's' : ''}
                        </Badge>
                      </TableCell>
                      <TableCell>
                        <Badge variant={eventCount > 0 ? 'default' : 'outline'}>
                          {eventCount > 0 ? 'In Use' : 'Available'}
                      </Badge>
                    </TableCell>
                    <TableCell className="text-right">
                      <div className="flex justify-end gap-2">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleEdit(eventType)}
                        >
                          <Edit className="h-4 w-4" />
                        </Button>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleDelete(eventType)}
                          disabled={eventCount > 0}
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                );
                })
              ) : (
                <TableRow>
                  <TableCell colSpan={4} className="text-center py-8 text-muted-foreground">
                    No event types configured yet. Click &ldquo;Add Event Type&rdquo; or use the quick start options above.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      {/* Add/Edit Dialog */}
      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>
              {editingEventType ? 'Edit Event Type' : 'Add New Event Type'}
            </DialogTitle>
            <DialogDescription>
              {editingEventType 
                ? 'Update the event type details below.'
                : 'Enter the details for the new event type.'
              }
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <Label htmlFor="name">Event Type Name</Label>
              <Input
                id="name"
                placeholder="e.g., Rally, ODE, Dressage"
                value={formData.name}
                onChange={(e) => setFormData({ name: e.target.value })}
              />
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsDialogOpen(false)}>
              Cancel
            </Button>
            <Button onClick={handleSave} disabled={!formData.name.trim()}>
              {editingEventType ? 'Update Event Type' : 'Create Event Type'}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
