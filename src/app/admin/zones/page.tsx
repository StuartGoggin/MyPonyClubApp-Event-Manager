'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Plus, Edit, Trash2, MapPin, Users, AlertTriangle } from 'lucide-react';
import { Zone, Club } from '@/lib/types';
import { zonesMockClient, clubsMockClient } from '@/lib/admin-data';

export default function AdminZonesPage() {
  const [zones, setZones] = useState<Zone[]>([]);
  const [clubs, setClubs] = useState<Club[]>([]);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [editingZone, setEditingZone] = useState<Zone | null>(null);
  const [formData, setFormData] = useState({ name: '' });

  useEffect(() => {
    // Initialize with mock data for now
    setZones(zonesMockClient);
    setClubs(clubsMockClient);
  }, []);

  const getClubCountForZone = (zoneId: string) => {
    return clubs.filter(club => club.zoneId === zoneId).length;
  };

  const handleCreate = () => {
    setEditingZone(null);
    setFormData({ name: '' });
    setIsDialogOpen(true);
  };

  const handleEdit = (zone: Zone) => {
    setEditingZone(zone);
    setFormData({ name: zone.name });
    setIsDialogOpen(true);
  };

  const handleSave = async () => {
    if (!formData.name.trim()) return;

    if (editingZone) {
      // Update existing zone
      setZones(prev => prev.map(zone => 
        zone.id === editingZone.id 
          ? { ...zone, name: formData.name.trim() }
          : zone
      ));
    } else {
      // Create new zone
      const newZone: Zone = {
        id: `zone-${Date.now()}`, // In real app, this would be generated by backend
        name: formData.name.trim()
      };
      setZones(prev => [...prev, newZone]);
    }

    setIsDialogOpen(false);
    setEditingZone(null);
    setFormData({ name: '' });
  };

  const handleDelete = async (zone: Zone) => {
    const clubCount = getClubCountForZone(zone.id);
    if (clubCount > 0) {
      alert(`Cannot delete zone "${zone.name}" as it has ${clubCount} club(s) assigned to it. Please reassign or remove the clubs first.`);
      return;
    }

    if (confirm(`Are you sure you want to delete the zone "${zone.name}"?`)) {
      setZones(prev => prev.filter(z => z.id !== zone.id));
    }
  };

  const handleDeleteAll = async () => {
    if (confirm('Are you sure you want to delete ALL zones and clubs? This action cannot be undone.')) {
      setZones([]);
      setClubs([]);
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold tracking-tight">Zone Management</h1>
          <p className="text-muted-foreground">
            Manage zones across Victoria for organizing pony clubs
          </p>
        </div>
        <div className="flex gap-2">
          {zones.length > 0 && (
            <Button onClick={handleDeleteAll} variant="destructive">
              <Trash2 className="h-4 w-4 mr-2" />
              Delete All Data
            </Button>
          )}
          <Button onClick={handleCreate}>
            <Plus className="h-4 w-4 mr-2" />
            Add Zone
          </Button>
        </div>
      </div>

      {/* Summary Stats */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Total Zones</p>
                <p className="text-2xl font-bold">{zones.length}</p>
              </div>
              <MapPin className="h-8 w-8 text-blue-500" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Total Clubs</p>
                <p className="text-2xl font-bold">{clubs.length}</p>
              </div>
              <Users className="h-8 w-8 text-green-500" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Avg Clubs/Zone</p>
                <p className="text-2xl font-bold">
                  {zones.length > 0 ? Math.round(clubs.length / zones.length * 10) / 10 : 0}
                </p>
              </div>
              <MapPin className="h-8 w-8 text-purple-500" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Zones Table */}
      <Card>
        <CardHeader>
          <CardTitle>All Zones</CardTitle>
          <CardDescription>
            List of all zones and their associated clubs
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Zone Name</TableHead>
                <TableHead>Club Count</TableHead>
                <TableHead>Status</TableHead>
                <TableHead className="text-right">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {zones.map(zone => {
                const clubCount = getClubCountForZone(zone.id);
                return (
                  <TableRow key={zone.id}>
                    <TableCell className="font-medium">{zone.name}</TableCell>
                    <TableCell>
                      <Badge variant="secondary">
                        {clubCount} club{clubCount !== 1 ? 's' : ''}
                      </Badge>
                    </TableCell>
                    <TableCell>
                      <Badge variant={clubCount > 0 ? 'default' : 'outline'}>
                        {clubCount > 0 ? 'Active' : 'Empty'}
                      </Badge>
                    </TableCell>
                    <TableCell className="text-right">
                      <div className="flex justify-end gap-2">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleEdit(zone)}
                        >
                          <Edit className="h-4 w-4" />
                        </Button>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleDelete(zone)}
                          disabled={clubCount > 0}
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                );
              })}
              {zones.length === 0 && (
                <TableRow>
                  <TableCell colSpan={4} className="text-center py-8 text-muted-foreground">
                    No zones configured yet. Click "Add Zone" to get started.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      {/* Add/Edit Dialog */}
      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>
              {editingZone ? 'Edit Zone' : 'Add New Zone'}
            </DialogTitle>
            <DialogDescription>
              {editingZone 
                ? 'Update the zone details below.'
                : 'Enter the details for the new zone.'
              }
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <Label htmlFor="name">Zone Name</Label>
              <Input
                id="name"
                placeholder="e.g., Eastern Victoria, Western Victoria"
                value={formData.name}
                onChange={(e) => setFormData({ name: e.target.value })}
              />
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsDialogOpen(false)}>
              Cancel
            </Button>
            <Button onClick={handleSave} disabled={!formData.name.trim()}>
              {editingZone ? 'Update Zone' : 'Create Zone'}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
