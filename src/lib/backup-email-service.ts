import { addEmailToQueue } from './email-queue-admin';
import { QueuedEmail, EmailQueueConfig } from './types';
import { getInitialEmailStatus, shouldAutoSend } from './email-approval-utils';
import { autoSendQueuedEmail } from './auto-send-email';
import { storeAttachmentFile } from './attachment-storage';

/**
 * Send backup email using the existing email queue system
 */
export async function sendBackupEmail(
  recipients: string[],
  subject: string,
  scheduleName: string,
  backupBuffer: Buffer,
  fileSizeMB: number,
  scheduleConfig: any
): Promise<void> {
  try {
    const timestamp = new Date().toISOString().split('T')[0];
    const filename = `backup-${scheduleName.replace(/[^a-z0-9]/gi, '-')}-${timestamp}.zip`;
    
    // Create HTML email content
    const htmlContent = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #2563eb;">Automated Database Backup</h2>
        
        <p>Hello,</p>
        
        <p>Your scheduled backup "${scheduleName}" has been completed successfully.</p>
        
        <div style="background-color: #f3f4f6; padding: 20px; border-radius: 8px; margin: 20px 0;">
          <h3 style="margin-top: 0;">Backup Details</h3>
          <p><strong>Schedule:</strong> ${scheduleName}</p>
          <p><strong>Date:</strong> ${new Date().toLocaleString()}</p>
          <p><strong>File Size:</strong> ${fileSizeMB.toFixed(2)} MB</p>
          <p><strong>Content:</strong> ${Object.keys(scheduleConfig).filter(key => 
            key.startsWith('include') && scheduleConfig[key]
          ).map(key => key.replace('include', '')).join(', ')}</p>
        </div>
        
        <p>The backup file is attached to this email. Please store it securely.</p>
        
        <p><strong>Important:</strong> This backup contains sensitive data. Handle with care.</p>
        
        <p>Best regards,<br>
        Pony Club Event Manager - Backup System</p>
      </div>
    `;

    // Create text version for email clients that don't support HTML
    const textContent = `
Automated Database Backup

Hello,

Your scheduled backup "${scheduleName}" has been completed successfully.

Backup Details:
- Schedule: ${scheduleName}
- Date: ${new Date().toLocaleString()}
- File Size: ${fileSizeMB.toFixed(2)} MB
- Content: ${Object.keys(scheduleConfig).filter(key => 
  key.startsWith('include') && scheduleConfig[key]
).map(key => key.replace('include', '')).join(', ')}

The backup file is attached to this email. Please store it securely.

Important: This backup contains sensitive data. Handle with care.

Best regards,
Pony Club Event Manager - Backup System
    `;

    // Get email queue configuration (using default config for backup emails)
    const emailConfig: EmailQueueConfig = {
      maxRetries: 3,
      retryDelayMinutes: 5,
      requireApprovalForBackups: false, // Backup emails don't require approval
    };

    // Determine initial status based on approval requirements
    const initialStatus = getInitialEmailStatus('backup', emailConfig);
    
    console.log(`üì¶ Storing backup attachment (${fileSizeMB.toFixed(2)} MB) in Firebase Storage...`);
    
    // Store the backup file in Firebase Storage instead of embedding in email
    const storedAttachment = await storeAttachmentFile(
      filename,
      backupBuffer,
      'application/zip',
      'backup-attachments' // Store in specific backup folder
    );
    
    console.log(`‚úÖ Backup file stored in Firebase Storage: ${storedAttachment.id}`);
    
    // Create email data for the queue
    const emailData: Omit<QueuedEmail, 'id' | 'createdAt' | 'updatedAt'> = {
      to: recipients,
      subject: subject,
      htmlContent: htmlContent,
      textContent: textContent,
      type: 'backup', // Backup email type
      priority: 'high', // Backup emails are high priority
      status: initialStatus, // Will be 'pending' for backup emails (no approval needed)
      attachments: [
        {
          id: storedAttachment.id,
          filename: storedAttachment.filename,
          url: storedAttachment.downloadUrl, // Store URL instead of content
          contentType: storedAttachment.contentType,
          size: storedAttachment.size,
          createdAt: storedAttachment.createdAt
        }
      ],
      metadata: {
        scheduleId: scheduleName,
        backupSize: fileSizeMB,
        backupDate: timestamp,
        autoGenerated: true,
        systemGenerated: true, // Flag to indicate this was generated by the system
        storageInfo: {
          storageUrl: storedAttachment.storageUrl,
          downloadUrl: storedAttachment.downloadUrl,
          expiresAt: storedAttachment.expiresAt
        }
      }
    };

    // Add to email queue
    const emailId = await addEmailToQueue(emailData);
    
    console.log(`‚úÖ Backup email queued successfully: ${emailId}`);
    console.log(`üìß Recipients: ${recipients.join(', ')}`);
    console.log(`üìé Attachment: ${filename} (${fileSizeMB.toFixed(2)} MB)`);
    console.log(`ÔøΩ Status: ${initialStatus}`);
    
    // Auto-send the email if it doesn't require approval
    if (shouldAutoSend('backup', emailConfig)) {
      console.log(`üöÄ Auto-sending backup email (no approval required)`);
      try {
        await autoSendQueuedEmail(emailId);
        console.log(`‚úÖ Backup email sent automatically`);
      } catch (autoSendError) {
        console.error(`‚ö†Ô∏è Failed to auto-send backup email, but it remains queued:`, autoSendError);
        // Don't throw here - the email is still queued and can be sent manually
      }
    } else {
      console.log(`üìã Backup email queued for approval before sending`);
    }
    
  } catch (error) {
    console.error('‚ùå Failed to queue backup email:', error);
    throw new Error(`Failed to send backup email: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

// Note: Backup emails are queued with high priority and will be processed
// automatically by the email queue system. They don't require manual approval
// and will be sent as soon as the queue processor handles them.